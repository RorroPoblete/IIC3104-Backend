services:
  # Microservicio mínimo de Health
  health-service:
    build:
      context: ./microservices/health-service
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/healthdb
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - backend-network

  # Servicio de autenticación (login Admin)
  auth-service:
    build:
      context: ./microservices/auth-service
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - AUTH_SERVICE_PORT=3001
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/healthdb
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - JWT_EXPIRES_IN=60m
      - CORS_ORIGIN=http://localhost:8000
      - AUTH0_DOMAIN=${AUTH0_DOMAIN:-dev-zf0t1haoznajlc0p.us.auth0.com}
      - AUTH0_AUDIENCE=${AUTH0_AUDIENCE:-https://uc-grd-api}
      - AUTH0_CLIENT_ID=${AUTH0_CLIENT_ID:-iAykGccBga5TpUWEul4FmtP2w1lRp2In}
    depends_on:
      - postgres
    command: sh -c "for i in $(seq 1 30); do npm run prisma:push && break || (echo 'Esperando Postgres...'; sleep 2); done; npm run seed; npm start"
    networks:
      - backend-network

  # Base de datos PostgreSQL (maestros e histórico)
  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=healthdb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend-network

  # Cache Redis (validaciones)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - backend-network

volumes:
  postgres_data:
  redis_data:

networks:
  backend-network:
    driver: bridge
